/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.h
 #	source generated by 4D Plugin Wizard
 #	Project : mapm
 #	author : miyako
 #	2018/09/21
 #
 # --------------------------------------------------------------------------------*/

#include <sys/timeb.h>  /* ftime, timeb (for timestamp in millisecond) */
#include <stdio.h> /* snprintf */

#include <mutex>

#include "m_apm.h"

void m_apm_to_param_at_index(M_APM mapm, PackagePtr pParams, uint16_t index);
M_APM m_apm_from_param_at_index(PackagePtr pParams, uint16_t index);
int int_from_param_at_index(PackagePtr pParams, uint16_t index);
void return_int(sLONG_PTR *pResult, int value);

void OnStartup();
void OnExit();

// --- mapm
void m_apm_gcd(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_lcm(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_add(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_subtract(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_multiply(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_divide(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_integer_divide(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_integer_div_rem(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_reciprocal(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_factorial(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_floor(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_ceil(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_get_random(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_sqrt(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_cbrt(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_log(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_log10(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_exp(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_pow(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_integer_pow(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_integer_pow_nr(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_sin_cos(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_sin(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_cos(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_tan(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_arcsin(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_arccos(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_arctan(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_arctan2(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_sinh(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_cosh(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_tanh(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_arcsinh(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_arccosh(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_arctanh(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_absolute_value(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_negate(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_round(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_compare(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_sign(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_exponent(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_significant_digits(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_is_integer(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_is_even(sLONG_PTR *pResult, PackagePtr pParams);
void m_apm_is_odd(sLONG_PTR *pResult, PackagePtr pParams);
